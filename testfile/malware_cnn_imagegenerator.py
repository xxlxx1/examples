'''Trains a simple convnet on the MNIST dataset.

Gets to 99.25% test accuracy after 12 epochs
(there is still a lot of margin for parameter tuning).
16 seconds per epoch on a GRID K520 GPU.
'''

from __future__ import print_function
import numpy as np
np.random.seed(1337)  # for reproducibility


from keras.models import Sequential
from keras.datasets import malware
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
from keras.preprocessing.image import ImageDataGenerator

nb_classes = 2

# input image dimensions
img_rows, img_cols = 512,512
# number of convolutional filters to use
nb_filters = 16
# size of pooling area for max pooling
pool_size = (2, 2)
# convolution kernel size
kernel_size = (3, 3)


input_shape = (1, img_rows, img_cols)
model = Sequential()

model.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1],
                        border_mode='valid',
                        input_shape=input_shape))

model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=pool_size))
model.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=pool_size))
model.add(Convolution2D(nb_filters*2, kernel_size[0], kernel_size[1]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=pool_size))
model.add(Convolution2D(nb_filters*2, kernel_size[0], kernel_size[1]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=pool_size))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes))
model.add(Activation('softmax'))

model.compile(loss='binary_crossentropy',
              optimizer='adadelta',
              metrics=['accuracy'])
model.summary()
# model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=nb_epoch,
#           verbose=1,shuffle=True,validation_split=0.1)


train_datagen = ImageDataGenerator(
        rescale=1. / 255,
        shear_range=0,
        zoom_range=0,
        horizontal_flip=False)
train_generator = train_datagen.flow_from_directory(
        'F://data//train1',
        target_size=(img_rows, img_cols),color_mode='grayscale',
        batch_size=10,
        class_mode='categorical')
validation_datagen = ImageDataGenerator(rescale=1. / 255,)
validation_generator = validation_datagen.flow_from_directory(
        'F://data//validation1',
        target_size=(img_rows, img_cols),color_mode='grayscale',
        batch_size=10,
        class_mode='categorical')
model.fit_generator(
        train_generator,
        samples_per_epoch=1600,
        nb_epoch=50,
    verbose=1,
validation_data=validation_generator, nb_val_samples=200)